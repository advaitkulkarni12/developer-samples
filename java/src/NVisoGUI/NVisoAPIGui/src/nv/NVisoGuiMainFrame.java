/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nv;

import com.csvreader.CsvWriter;
import com.nviso.nViso3DFIHttpClient;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Kevin Georgy
 */
public class NVisoGuiMainFrame extends javax.swing.JFrame implements Observer {

    private ProcessedImageListModel processedImageListModel = new ProcessedImageListModel();
    private String initialAppId = "";
    private String initialAppKey = "";
    private ArrayList<ProcessedImage> processingList = new ArrayList<>();
    private nViso3DFIHttpClient client = null;
    private int blockStarts = 0;
    private int blockCount = 0;
    private int processedCount = 0;
    private int currentInBlockProcessed = -1;
    
    /**
     * Creates new form NVisoGuiMainFrame
     */
    public NVisoGuiMainFrame(String appId, String appKey) {
        initComponents();
        initialAppId = appId;
        initialAppKey = appKey;
        applicationIdText.setText(appId);
        applicationKeyText.setText(appKey);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        applicationIdLabel = new javax.swing.JLabel();
        applicationKeyLabel = new javax.swing.JLabel();
        applicationIdText = new javax.swing.JTextField();
        applicationKeyText = new javax.swing.JTextField();
        folderLabel = new javax.swing.JLabel();
        folderPathLabel = new javax.swing.JLabel();
        selectFolderButtom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        folderImagesList = new javax.swing.JList();
        processAllButton = new javax.swing.JButton();
        saveToCsvButton = new javax.swing.JButton();
        sessionIdLabel = new javax.swing.JLabel();
        sessionIdText = new javax.swing.JTextField();
        processedImagePanel = new nv.ProcessedImagePanel();
        processedEmotionPanel = new nv.ProcessedEmotionPanel();
        processingProgressBar = new javax.swing.JProgressBar();
        processSelectedButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        applicationIdLabel.setText("Application ID :");

        applicationKeyLabel.setText("Application Key :");

        folderLabel.setText("Folder :");

        selectFolderButtom.setText("Select ...");
        selectFolderButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderButtomActionPerformed(evt);
            }
        });

        folderImagesList.setModel(processedImageListModel);
        folderImagesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                folderImagesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(folderImagesList);

        processAllButton.setText("(Re)process all");
        processAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processAllButtonActionPerformed(evt);
            }
        });

        saveToCsvButton.setText("Save emotion profiles to CSV");
        saveToCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToCsvButtonActionPerformed(evt);
            }
        });

        sessionIdLabel.setText("Session ID");

        sessionIdText.setText("0000111");

        javax.swing.GroupLayout processedImagePanelLayout = new javax.swing.GroupLayout(processedImagePanel);
        processedImagePanel.setLayout(processedImagePanelLayout);
        processedImagePanelLayout.setHorizontalGroup(
            processedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        processedImagePanelLayout.setVerticalGroup(
            processedImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        processedEmotionPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout processedEmotionPanelLayout = new javax.swing.GroupLayout(processedEmotionPanel);
        processedEmotionPanel.setLayout(processedEmotionPanelLayout);
        processedEmotionPanelLayout.setHorizontalGroup(
            processedEmotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        processedEmotionPanelLayout.setVerticalGroup(
            processedEmotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        processSelectedButton.setText("(Re)process selected");
        processSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processSelectedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applicationKeyLabel)
                            .addComponent(applicationIdLabel))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applicationIdText)
                            .addComponent(applicationKeyText, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sessionIdLabel)
                        .addGap(33, 33, 33)
                        .addComponent(sessionIdText))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(processingProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processSelectedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveToCsvButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(folderLabel)
                        .addGap(47, 47, 47)
                        .addComponent(folderPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectFolderButtom))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(processedEmotionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processedImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applicationIdLabel)
                    .addComponent(applicationIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applicationKeyLabel)
                    .addComponent(applicationKeyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sessionIdLabel)
                    .addComponent(sessionIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectFolderButtom)
                    .addComponent(folderLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(folderPathLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(processedImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processedEmotionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processAllButton)
                    .addComponent(saveToCsvButton)
                    .addComponent(processingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processSelectedButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFolderButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderButtomActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose an image directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            
            // Clear the list
            processedImageListModel.clear();
            
            File folder = chooser.getSelectedFile();
            this.folderPathLabel.setText(folder.toString());
      
            // Populate the list with the folder content
            File[] imagesFiles = folder.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    return name.endsWith(".jpg") || name.endsWith(".jpeg") || name.endsWith(".png");
                }
                
            });
            
            for (File f : imagesFiles) {
                processedImageListModel.addProcessedImage(new ProcessedImage(f));
            }
        }
    }//GEN-LAST:event_selectFolderButtomActionPerformed

    private void initBlocks() {
        blockStarts = 0;
        blockCount = Math.min(10, processingList.size());
        currentInBlockProcessed = 0;
    }
    
    private void processNextBlock() {
        for (int i = blockStarts; i < blockStarts+blockCount; i++) {
            ProcessedImage current = processingList.get(i);
            // Call the API
            client.processEmotionImageByUpload(
                    current.getImagePath(), 
                    sessionIdText.getText(), 
                    "["+(i)+"]",
                    null,
                    null,//"batch",
                    "1",
                    "json", 
                    new ProcessedImageMashapeCallback(current));
            
        }
    }
    
    private void processSelectedList() {
        
        if (processingList.size() <= 0) {
            return;
        }
        // Disable ui component
        componentsInProcessingState();
        
        // Init the client
        client = new nViso3DFIHttpClient(
            applicationIdText.getText(),
            applicationKeyText.getText());
        
        // Set up the progress bar
        processingProgressBar.setMinimum(0);
        processingProgressBar.setMaximum(processingList.size());
        processingProgressBar.setValue(0);
        
        // Register this as observer of all images
        processedCount = 0;
        for (ProcessedImage current : processingList)
        {
            //ProcessedImage current = processedImageListModel.getElementAt(i);
            current.addObserver(this);
            current.setProcessing();
        }
        
        initBlocks();
        if (blockCount > 0) {
            processNextBlock();
        }
        
    }
    
    private void processAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processAllButtonActionPerformed
        processingList.clear();
        for (int i = 0; i < processedImageListModel.getSize(); i++) {
            processingList.add(processedImageListModel.getElementAt(i));
        }
        processSelectedList();
    }//GEN-LAST:event_processAllButtonActionPerformed

    private void saveToCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToCsvButtonActionPerformed
        // Choose CSV File
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose a CSV file");
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if(f.isDirectory()) {return true;}
                return f.getName().endsWith(".csv");
            }

            @Override
            public String getDescription() {
                return "Csv file (*.csv)";
            }
        });
        
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File csvFile = chooser.getSelectedFile();
            if (!csvFile.getName().endsWith(".csv")) {
                JOptionPane.showMessageDialog(null,
                    csvFile.getName() + " is not a valid csv file name.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    Date date = new Date();
                    boolean writeHeader = !csvFile.exists();
                    FileWriter fileWriter = new FileWriter(csvFile,true);
                    CsvWriter csvWriter = new CsvWriter(fileWriter,',');
                    // Write header if needed
                    if (writeHeader) {
                        csvWriter.write("File");
                        csvWriter.write("Date");
                        csvWriter.write("Session ID");
                        csvWriter.write("Frame ID");
                        for (String emo : ProcessedFace.ALL_EMOTIONS) {
                            csvWriter.write(emo);
                        }
                        csvWriter.write("No face found");
                        csvWriter.write("Error");
                        csvWriter.endRecord();
                    }
                    // Write value for each image
                    for (int i = 0; i < processedImageListModel.getSize(); i++)
                    {
                        ProcessedImage current = processedImageListModel.getElementAt(i);
                        if (current.getState() == ProcessedImage.State.Processed)
                        {
                            csvWriter.write(current.getImagePath().getName());
                            csvWriter.write(dateFormat.format(date));
                            csvWriter.write(sessionIdText.getText());
                            csvWriter.write(Integer.toString(i));
                            // Face no face
                            if (current.getFaces().size() > 0) {
                                ProcessedFace face = current.getFaces().get(0);
                                for (String emo : ProcessedFace.ALL_EMOTIONS) {
                                    csvWriter.write(Double.toString(face.getEmotionProfile().get(emo)));
                                }
                                csvWriter.write("0");
                            } else {
                                for (String emo : ProcessedFace.ALL_EMOTIONS) {
                                    csvWriter.write("NaN");
                                }
                                csvWriter.write("1");
                            }
                            csvWriter.write(current.getProcessingStatusMessage());
                            csvWriter.endRecord();
                        }
                    }
                    csvWriter.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null,
                        csvFile.getName() + " cannot be used ("+ex.getMessage()+")",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
                
                
            }
        }
    }//GEN-LAST:event_saveToCsvButtonActionPerformed

    private void folderImagesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_folderImagesListValueChanged
        processedImagePanel.setProcessedImage((ProcessedImage)folderImagesList.getSelectedValue());
        processedEmotionPanel.setProcessedImage((ProcessedImage)folderImagesList.getSelectedValue());
    }//GEN-LAST:event_folderImagesListValueChanged

    private void processSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processSelectedButtonActionPerformed
        processingList.clear();
        processingList.addAll(folderImagesList.getSelectedValuesList());
        processSelectedList();
    }//GEN-LAST:event_processSelectedButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel applicationIdLabel;
    private javax.swing.JTextField applicationIdText;
    private javax.swing.JLabel applicationKeyLabel;
    private javax.swing.JTextField applicationKeyText;
    private javax.swing.JList folderImagesList;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JLabel folderPathLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processAllButton;
    private javax.swing.JButton processSelectedButton;
    private nv.ProcessedEmotionPanel processedEmotionPanel;
    private nv.ProcessedImagePanel processedImagePanel;
    private javax.swing.JProgressBar processingProgressBar;
    private javax.swing.JButton saveToCsvButton;
    private javax.swing.JButton selectFolderButtom;
    private javax.swing.JLabel sessionIdLabel;
    private javax.swing.JTextField sessionIdText;
    // End of variables declaration//GEN-END:variables

    private void componentsInProcessingState() {
        applicationIdText.setEnabled(false);
        applicationKeyText.setEnabled(false);
        sessionIdText.setEnabled(false);
        selectFolderButtom.setEnabled(false);
        saveToCsvButton.setEnabled(false);
        processAllButton.setEnabled(false);
        processSelectedButton.setEnabled(false);
    }
    
    private void componentsInNormalState() {
        applicationIdText.setEnabled(true);
        applicationKeyText.setEnabled(true);
        sessionIdText.setEnabled(true);
        selectFolderButtom.setEnabled(true);
        saveToCsvButton.setEnabled(true);
        processAllButton.setEnabled(true);
        processSelectedButton.setEnabled(true);
    }
    
    @Override
    public void update(Observable o, Object arg) {
        // Some items in the list are updated ... update the progress
        
        synchronized(this) {
            //int processedCount = 0;
            //for (ProcessedImage current : processingList) {
                //ProcessedImage current = processedImageListModel.getElementAt(i);
                ProcessedImage current = (ProcessedImage)o;
                if (current.getState() == ProcessedImage.State.Processed) {
                    processedCount += 1;
                    currentInBlockProcessed += 1;
                }
            //}
            processingProgressBar.setValue(processedCount);
            // If block finished
            if (currentInBlockProcessed == blockCount) {
                currentInBlockProcessed = 0;
                blockStarts = blockStarts+blockCount;
                blockCount = Math.min(10, processingList.size()-blockStarts);
                if (blockCount > 0) {
                    processNextBlock();
                }
            }
            // If processing finished
            if (processedCount == processingList.size()) {
                for (ProcessedImage cimg : processingList) {
                    //ProcessedImage current = processedImageListModel.getElementAt(i);
                    cimg.deleteObserver(this);
                }
                processedCount = 0;
                currentInBlockProcessed = -1;
                componentsInNormalState();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Get the app_id and app_key from args
        String appId = "";
        String appKey = "";
        if (args.length == 2)
        {
           appId = args[0];
           appKey = args[1];
        }
        
        final String fAppId = appId;
        final String fAppKey = appKey;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NVisoGuiMainFrame(fAppId, fAppKey).setVisible(true);
            }
        });
    }
}
