/**
 * Developer API
 * Documentation of worker endpoints
 *
 * OpenAPI spec version: 2.2
 * Contact: info@nviso.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhotoApi {
    private ApiClient apiClient;

    public PhotoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PhotoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for photoProcessBase64 */
    private com.squareup.okhttp.Call photoProcessBase64Call(String bas64, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bas64;
        
        // verify the required parameter 'bas64' is set
        if (bas64 == null) {
            throw new ApiException("Missing the required parameter 'bas64' when calling photoProcessBase64(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/photo/process/base64".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in a JSON format.
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in a JSON format. Same options as /photo/process/upload.
     * @param bas64 Base 64 encoded image (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String photoProcessBase64(String bas64, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = photoProcessBase64WithHttpInfo(bas64, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in a JSON format.
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in a JSON format. Same options as /photo/process/upload.
     * @param bas64 Base 64 encoded image (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> photoProcessBase64WithHttpInfo(String bas64, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = photoProcessBase64Call(bas64, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in a JSON format. (asynchronously)
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in a JSON format. Same options as /photo/process/upload.
     * @param bas64 Base 64 encoded image (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call photoProcessBase64Async(String bas64, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = photoProcessBase64Call(bas64, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for photoProcessUpload */
    private com.squareup.okhttp.Call photoProcessUploadCall(File file, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling photoProcessUpload(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/photo/process/upload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process an uploaded photo encoded in JPEG or PNG format returning result in a JSON format.
     * Process an uploaded photo encoded in JPEG or PNG format returning result in JSON format. Options that can be set to process the image include specifying if multiple faces should be detected, the distance of the faces that should be detected from the camera, and if a region of interest should be set to restrict processing of faces within the specified region of interest.
     * @param file File to post to the API. (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String photoProcessUpload(File file, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = photoProcessUploadWithHttpInfo(file, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process an uploaded photo encoded in JPEG or PNG format returning result in a JSON format.
     * Process an uploaded photo encoded in JPEG or PNG format returning result in JSON format. Options that can be set to process the image include specifying if multiple faces should be detected, the distance of the faces that should be detected from the camera, and if a region of interest should be set to restrict processing of faces within the specified region of interest.
     * @param file File to post to the API. (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> photoProcessUploadWithHttpInfo(File file, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = photoProcessUploadCall(file, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process an uploaded photo encoded in JPEG or PNG format returning result in a JSON format. (asynchronously)
     * Process an uploaded photo encoded in JPEG or PNG format returning result in JSON format. Options that can be set to process the image include specifying if multiple faces should be detected, the distance of the faces that should be detected from the camera, and if a region of interest should be set to restrict processing of faces within the specified region of interest.
     * @param file File to post to the API. (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call photoProcessUploadAsync(File file, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = photoProcessUploadCall(file, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for photoProcessUrl */
    private com.squareup.okhttp.Call photoProcessUrlCall(String url, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling photoProcessUrl(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/photo/process/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process a JPEG or PNG image downloaded from provided URL returning result in a JSON format.
     * Process a JPEG or PNG image downloaded from provided URL returning result in a JSON format. Same options as /photo/process/upload.
     * @param url URL to upload the picture (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String photoProcessUrl(String url, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = photoProcessUrlWithHttpInfo(url, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process a JPEG or PNG image downloaded from provided URL returning result in a JSON format.
     * Process a JPEG or PNG image downloaded from provided URL returning result in a JSON format. Same options as /photo/process/upload.
     * @param url URL to upload the picture (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> photoProcessUrlWithHttpInfo(String url, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = photoProcessUrlCall(url, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process a JPEG or PNG image downloaded from provided URL returning result in a JSON format. (asynchronously)
     * Process a JPEG or PNG image downloaded from provided URL returning result in a JSON format. Same options as /photo/process/upload.
     * @param url URL to upload the picture (required)
     * @param format Format of the JSON response. Default is v2-Full. (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call photoProcessUrlAsync(String url, String format, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = photoProcessUrlCall(url, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for photoRenderBase64 */
    private com.squareup.okhttp.Call photoRenderBase64Call(String bas64, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bas64;
        
        // verify the required parameter 'bas64' is set
        if (bas64 == null) {
            throw new ApiException("Missing the required parameter 'bas64' when calling photoRenderBase64(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/photo/render/base64".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (enableFooter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFooter", enableFooter));
        if (dimSecFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dimSecFaces", dimSecFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result as rendered visualization.
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param bas64 Base 64 encoded image (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String photoRenderBase64(String bas64, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = photoRenderBase64WithHttpInfo(bas64, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result as rendered visualization.
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param bas64 Base 64 encoded image (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> photoRenderBase64WithHttpInfo(String bas64, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = photoRenderBase64Call(bas64, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result as rendered visualization. (asynchronously)
     * Process an uploaded Base64 encoded String in JPEG or PNG format returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param bas64 Base 64 encoded image (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call photoRenderBase64Async(String bas64, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = photoRenderBase64Call(bas64, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for photoRenderUpload */
    private com.squareup.okhttp.Call photoRenderUploadCall(File file, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling photoRenderUpload(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/photo/render/upload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (enableFooter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFooter", enableFooter));
        if (dimSecFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dimSecFaces", dimSecFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process an uploaded photo encoded in JPEG or PNG format returning result as rendered visualization.
     * Process an uploaded photo encoded in JPEG or PNG format returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param file File to post to the API. (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String photoRenderUpload(File file, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = photoRenderUploadWithHttpInfo(file, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process an uploaded photo encoded in JPEG or PNG format returning result as rendered visualization.
     * Process an uploaded photo encoded in JPEG or PNG format returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param file File to post to the API. (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> photoRenderUploadWithHttpInfo(File file, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = photoRenderUploadCall(file, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process an uploaded photo encoded in JPEG or PNG format returning result as rendered visualization. (asynchronously)
     * Process an uploaded photo encoded in JPEG or PNG format returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param file File to post to the API. (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call photoRenderUploadAsync(File file, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = photoRenderUploadCall(file, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for photoRenderUrl */
    private com.squareup.okhttp.Call photoRenderUrlCall(String url, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling photoRenderUrl(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/photo/render/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (enableFooter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFooter", enableFooter));
        if (dimSecFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dimSecFaces", dimSecFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process a JPEG or PNG image downloaded from provided URL returning result as rendered visualization.
     * Process a JPEG or PNG image downloaded from provided URL returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param url URL to upload the picture (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String photoRenderUrl(String url, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = photoRenderUrlWithHttpInfo(url, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process a JPEG or PNG image downloaded from provided URL returning result as rendered visualization.
     * Process a JPEG or PNG image downloaded from provided URL returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param url URL to upload the picture (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> photoRenderUrlWithHttpInfo(String url, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = photoRenderUrlCall(url, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process a JPEG or PNG image downloaded from provided URL returning result as rendered visualization. (asynchronously)
     * Process a JPEG or PNG image downloaded from provided URL returning result in JSON format. Same options as /photo/process/upload. Note this function is only available if workers have been configured with OpenGL rendering.
     * @param url URL to upload the picture (required)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call photoRenderUrlAsync(String url, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = photoRenderUrlCall(url, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
