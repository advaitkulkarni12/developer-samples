/**
 * Developer API
 * Documentation of worker endpoints
 *
 * OpenAPI spec version: 2.2
 * Contact: info@nviso.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoApi {
    private ApiClient apiClient;

    public VideoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for videoProcessUpload */
    private com.squareup.okhttp.Call videoProcessUploadCall(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling videoProcessUpload(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/process/upload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fps != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fps", fps));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (enableFaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFaceId", enableFaceId));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process synchronously an uploaded MP4 encoded video keeping connection alive.
     * Process synchronously an uploaded MP4 encoded video keeping connection alive. Returns JSON upon completion of video processing.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoProcessUpload(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoProcessUploadWithHttpInfo(file, fps, width, height, enableFaceId, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process synchronously an uploaded MP4 encoded video keeping connection alive.
     * Process synchronously an uploaded MP4 encoded video keeping connection alive. Returns JSON upon completion of video processing.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoProcessUploadWithHttpInfo(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoProcessUploadCall(file, fps, width, height, enableFaceId, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process synchronously an uploaded MP4 encoded video keeping connection alive. (asynchronously)
     * Process synchronously an uploaded MP4 encoded video keeping connection alive. Returns JSON upon completion of video processing.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoProcessUploadAsync(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoProcessUploadCall(file, fps, width, height, enableFaceId, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for videoQueueDelete */
    private com.squareup.okhttp.Call videoQueueDeleteCall(String requestId, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling videoQueueDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/queue/delete".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "requestId", requestId));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete all stored data associated with video processed of request ID.
     * Delete all stored data associated with video processed of request ID.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoQueueDelete(String requestId, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoQueueDeleteWithHttpInfo(requestId, appId, appKey);
        return resp.getData();
    }

    /**
     * Delete all stored data associated with video processed of request ID.
     * Delete all stored data associated with video processed of request ID.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoQueueDeleteWithHttpInfo(String requestId, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoQueueDeleteCall(requestId, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all stored data associated with video processed of request ID. (asynchronously)
     * Delete all stored data associated with video processed of request ID.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoQueueDeleteAsync(String requestId, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoQueueDeleteCall(requestId, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for videoQueueList */
    private com.squareup.okhttp.Call videoQueueListCall(String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/video/queue/list".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List all request IDs.
     * List all request IDs with status information including status, duration, and filesize of the video.
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoQueueList(String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoQueueListWithHttpInfo(appId, appKey);
        return resp.getData();
    }

    /**
     * List all request IDs.
     * List all request IDs with status information including status, duration, and filesize of the video.
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoQueueListWithHttpInfo(String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoQueueListCall(appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all request IDs. (asynchronously)
     * List all request IDs with status information including status, duration, and filesize of the video.
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoQueueListAsync(String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoQueueListCall(appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for videoQueueResults */
    private com.squareup.okhttp.Call videoQueueResultsCall(String requestId, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling videoQueueResults(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/queue/results".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "requestId", requestId));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Download result of uploaded video using request ID.
     * Download result of uploaded video using request ID. The result is returned as a ZIP file containing the results in a JSON format. If OpenGL rendering is enabled, the ZIP also contains the rendered video.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoQueueResults(String requestId, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoQueueResultsWithHttpInfo(requestId, appId, appKey);
        return resp.getData();
    }

    /**
     * Download result of uploaded video using request ID.
     * Download result of uploaded video using request ID. The result is returned as a ZIP file containing the results in a JSON format. If OpenGL rendering is enabled, the ZIP also contains the rendered video.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoQueueResultsWithHttpInfo(String requestId, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoQueueResultsCall(requestId, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download result of uploaded video using request ID. (asynchronously)
     * Download result of uploaded video using request ID. The result is returned as a ZIP file containing the results in a JSON format. If OpenGL rendering is enabled, the ZIP also contains the rendered video.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoQueueResultsAsync(String requestId, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoQueueResultsCall(requestId, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for videoQueueStatus */
    private com.squareup.okhttp.Call videoQueueStatusCall(String requestId, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling videoQueueStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/queue/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (requestId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "requestId", requestId));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Check status of uploaded video using request ID.
     * Check status of uploaded video using request ID showing status information including status, duration, and filesize of the video.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoQueueStatus(String requestId, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoQueueStatusWithHttpInfo(requestId, appId, appKey);
        return resp.getData();
    }

    /**
     * Check status of uploaded video using request ID.
     * Check status of uploaded video using request ID showing status information including status, duration, and filesize of the video.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoQueueStatusWithHttpInfo(String requestId, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoQueueStatusCall(requestId, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check status of uploaded video using request ID. (asynchronously)
     * Check status of uploaded video using request ID showing status information including status, duration, and filesize of the video.
     * @param requestId ID associated to a video being processed (required)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoQueueStatusAsync(String requestId, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoQueueStatusCall(requestId, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for videoQueueUpload */
    private com.squareup.okhttp.Call videoQueueUploadCall(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling videoQueueUpload(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/queue/upload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fps != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fps", fps));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (enableFaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFaceId", enableFaceId));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (enableFooter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFooter", enableFooter));
        if (dimSecFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dimSecFaces", dimSecFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Process asynchronously an uploaded MP4 encoded returns request ID to enable status of video processing to be queried.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoQueueUpload(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoQueueUploadWithHttpInfo(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * 
     * Process asynchronously an uploaded MP4 encoded returns request ID to enable status of video processing to be queried.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoQueueUploadWithHttpInfo(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoQueueUploadCall(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Process asynchronously an uploaded MP4 encoded returns request ID to enable status of video processing to be queried.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoQueueUploadAsync(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoQueueUploadCall(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for videoRenderUpload */
    private com.squareup.okhttp.Call videoRenderUploadCall(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling videoRenderUpload(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/render/upload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fps != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fps", fps));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (enableFaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFaceId", enableFaceId));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));
        if (multipleFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multipleFaces", multipleFaces));
        if (enableFooter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "enableFooter", enableFooter));
        if (dimSecFaces != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dimSecFaces", dimSecFaces));
        if (xMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMin", xMin));
        if (xMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xMax", xMax));
        if (yMin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMin", yMin));
        if (yMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "yMax", yMax));
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appId", appId));
        if (appKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "appKey", appKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "video/mp4"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Process asynchronously an uploaded MP4 encoded returns request ID.
     * Process asynchronously an uploaded MP4 encoded returns request ID to enable status of video processing to be queried.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String videoRenderUpload(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        ApiResponse<String> resp = videoRenderUploadWithHttpInfo(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);
        return resp.getData();
    }

    /**
     * Process asynchronously an uploaded MP4 encoded returns request ID.
     * Process asynchronously an uploaded MP4 encoded returns request ID to enable status of video processing to be queried.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> videoRenderUploadWithHttpInfo(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey) throws ApiException {
        com.squareup.okhttp.Call call = videoRenderUploadCall(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Process asynchronously an uploaded MP4 encoded returns request ID. (asynchronously)
     * Process asynchronously an uploaded MP4 encoded returns request ID to enable status of video processing to be queried.
     * @param file File to post to the API. (required)
     * @param fps Number of fps of the video. (Default is 30) (optional)
     * @param width Width of the output video. (Default is 1280) (optional)
     * @param height Height of the output video. (Default is 720) (optional)
     * @param enableFaceId Enable Face recognition. (One ID is given to each of the faces). Default is false (optional)
     * @param distance Distance is the distance at which the picture was taken. Near &#x3D; 1.5 m; Medium &#x3D; 3 m; Far &gt; 3 m. Default value is near. (optional)
     * @param multipleFaces If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true. (optional)
     * @param enableFooter Enable the footer with more information on the emotions. Default value is true. (optional)
     * @param dimSecFaces If set to true, it will dim all the secondary faces. Default value is true. (optional)
     * @param xMin Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param xMax Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param yMin Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0 (optional)
     * @param yMax Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0 (optional)
     * @param appId Application ID. Used for the authentication (optional)
     * @param appKey Application key. Used for the authentication (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoRenderUploadAsync(File file, Integer fps, Integer width, Integer height, Boolean enableFaceId, String distance, Boolean multipleFaces, Boolean enableFooter, Boolean dimSecFaces, Double xMin, Double xMax, Double yMin, Double yMax, String appId, String appKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoRenderUploadCall(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
