/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package nv;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Observable;
import java.util.Observer;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.filechooser.FileFilter;

import com.csvreader.CsvWriter;
import com.nviso.nViso3DFIHttpClient;

/**
 *
 * @author Kevin Georgy
 */
public class NVisoGuiMainFrame extends javax.swing.JFrame implements Observer {

	private String[][] photoFiles = {};
    private ProcessedImageListModel processedImageListModel = new ProcessedImageListModel();
    private ProcessedFileTableModel processedFileTableModel = null;
    private String initialAppId = "";
    private String initialAppKey = "";
    private ArrayList<ProcessedImage> processingList = new ArrayList<>();
    private ArrayList<ProcessedVideo> processingVideosList = new ArrayList<>();
    private nViso3DFIHttpClient client = null;
    private int blockStarts = 0;
    private int blockCount = 0;
    private int processedCount = 0;
    private int currentInBlockProcessed = -1;
    
    /**
     * Creates new form NVisoGuiMainFrame
     */
    public NVisoGuiMainFrame(String appId, String appKey) {
    	
        initComponents();
        initialAppId = appId;
        initialAppKey = appKey;
        applicationIdText.setText(appId);
        applicationKeyText.setText(appKey);
        
        try {
        	this.setIconImage(ImageIO.read(getClass().getClassLoader().getResource("favicon-16x16.png")));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
        this.setTitle("Java SDK sample");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
        applicationIdLabel = new javax.swing.JLabel();
        applicationKeyLabel = new javax.swing.JLabel();
        applicationIdText = new javax.swing.JTextField();
        applicationKeyText = new javax.swing.JTextField();
        selectFolderButtom = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        
        jPhotoTab = new javax.swing.JPanel();
        
        jStreamScrollPane = new javax.swing.JScrollPane();
        jVideoScrollPane = new javax.swing.JScrollPane();
        
        photoFileCounterLabel = new javax.swing.JLabel();
        
        folderImagesList = new javax.swing.JList();
        
        processAllButton = new javax.swing.JButton();
        saveToCsvButton = new javax.swing.JButton();
        serverLabel = new javax.swing.JLabel();
        processedPhotoPanel = new nv.ProcessedImagePanel();
        processedEmotionPanel = new nv.ProcessedEmotionPanel();
        processingProgressBar = new javax.swing.JProgressBar();
        logoPanel = new javax.swing.JPanel() {
    		private Image image = null;
    		
    		@Override
    	    protected void paintComponent(Graphics g) {
    			super.paintComponent(g);
    			try {
					 if (image == null){
						 image = ImageIO.read(getClass().getClassLoader().getResource("iDEVELOP.png"));
						 image = image.getScaledInstance(250, 60, Image.SCALE_DEFAULT);
					 }
					g.drawImage(image, 10, 10, this);
				} catch (IOException e) {
					e.printStackTrace();
				}
    		}
    	};
    	logoPanel.setBackground(Color.white);
    	logoPanel.setMinimumSize(new Dimension(200,80));
    	logoPanel.setMaximumSize(new Dimension(3000,130));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        applicationIdLabel.setText("Application ID :");

        applicationKeyLabel.setText("Application Key :");
        
        /*processedPhotoPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
            	if (jTabbedPane.getSelectedIndex() == 2){ // Video
            		processedPhotoPanel.increaseFrame();
            		processedPhotoPanel.updateVideoFrame();
	            	
	            	processedEmotionPanel.setProcessedImage((ProcessedVideo)folderVideosList.getSelectedValue(), processedPhotoPanel.getJsonFrame());
            	}
            }
         });*/
        
        processedEmotionPanel.setBackground(new java.awt.Color(255, 255, 255));
        
        
        JSplitPane processedPhotoFullPanel = new JSplitPane(JSplitPane.VERTICAL_SPLIT, processedPhotoPanel, processedEmotionPanel);
        processedPhotoFullPanel.setDividerLocation(200);//processedPhotoFullPanel.getDividerSize()/2);


        selectFolderButtom.setText("Select Folder");
        selectFolderButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderButtomActionPerformed(evt);
            }
        });


        folderImagesList.setModel(processedImageListModel);
        folderImagesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                folderImagesListValueChanged(evt);
            }
        });
        
        photoFileCounterLabel.setText("Files loaded : 0");
        photoFileCounterLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        inputPhotoPanel = new JPanel();
        inputPhotoPanel.setLayout(new BoxLayout(inputPhotoPanel, BoxLayout.Y_AXIS));
        inputPhotoPanel.add(photoFileCounterLabel);
        inputPhotoPanel.setMaximumSize(new Dimension(150,40));
        
        
        
        
        String title[] = {"Filename", "Status"};
        processedFileTableModel = new ProcessedFileTableModel(title);
        folderImagesTable = new javax.swing.JTable(processedFileTableModel);
        photoScrollPane = new JScrollPane(folderImagesTable);
        folderImagesTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
            	folderImagesTableValueSelected(evt);
            }
         });
        folderImagesTable.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent evt) {
            	folderImagesTableValueSelected(evt);
            }
         });
        
        jPhotoTab.setLayout(new BorderLayout());
        jPhotoTab.add(photoScrollPane, BorderLayout.WEST);
        jPhotoTab.add(processedPhotoFullPanel, BorderLayout.CENTER);
        jPhotoTab.setVisible(true);
        
        
        jTabbedPane.add("Photos", jPhotoTab);
        jTabbedPane.add("Stream", jStreamScrollPane);
        jTabbedPane.setEnabledAt(1, false);
        jTabbedPane.add("Videos", jVideoScrollPane);
        jTabbedPane.setEnabledAt(2, false);
        
        processAllButton.setText("Process");
        processAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processAllButtonActionPerformed(evt);
            }
        });

        saveToCsvButton.setText("Export");
        saveToCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToCsvButtonActionPerformed(evt);
            }
        });

        serverLabel.setText("Server Url : http://nviso-apiv2-api.nviso.net/nviso/api/v2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
            		.addComponent(logoPanel))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    //.addComponent(logoPanel)
                    //.addGap(20, 20, 20)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applicationKeyLabel)
                            .addComponent(applicationIdLabel))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applicationIdText)
                            .addComponent(applicationKeyText, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverLabel)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    	.addComponent(inputPhotoPanel)
                    	.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processingProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveToCsvButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        )
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectFolderButtom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        )
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        ))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                //.addContainerGap()
                //.addGap(20, 20, 20)
                .addComponent(logoPanel)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applicationIdLabel)
                    .addComponent(applicationIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applicationKeyLabel)
                    .addComponent(applicationKeyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectFolderButtom)
                    )
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        ))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	.addComponent(inputPhotoPanel)
                    .addComponent(processingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processAllButton)
                    .addComponent(saveToCsvButton))
                .addContainerGap())
        );
        
        componentsInNormalState();
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectFolderButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderButtomActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose an image directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            
            // Clear the list
            processedImageListModel.clear();
            
            File folder = chooser.getSelectedFile();
            //this.folderPathLabel.setText(folder.toString());
      
            // Populate the list with the folder content
            File[] imagesFiles = folder.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    return name.endsWith(".jpg") || name.endsWith(".jpeg") || name.endsWith(".png");
                }
                
            });
            photoFileCounterLabel.setText("Files loaded : "+ Integer.toString(imagesFiles.length));
            
            for (File f : imagesFiles) {
                processedImageListModel.addProcessedImage(new ProcessedImage(f));
                //String[] file = {f.getName(), "Not processed"};
                ((ProcessedFileTableModel)folderImagesTable.getModel()).addProcessedImage(new ProcessedImage(f));
            }
        }
        componentsInNormalState();
    }//GEN-LAST:event_selectFolderButtomActionPerformed
    
    
    private void initBlocks() {
        blockStarts = 0;
        blockCount = Math.min(10, processingList.size());
        currentInBlockProcessed = 0;
    }
    
    private void processNextBlock() {
        for (int i = blockStarts; i < blockStarts+blockCount; i++) {
            ProcessedImage current = processingList.get(i);
            // Call the API
            Thread t = new Thread() {
            	public void run(){
            		client.processEmotionImageByUpload(current);
            	}
            };
            t.start();
        }
    }
    
    private void processSelectedList() {
        
        if (processingList.size() <= 0) {
            return;
        }
        // Disable ui component
        componentsInProcessingState();
        
        // Init the client
        client = new nViso3DFIHttpClient(
            applicationIdText.getText(),
            applicationKeyText.getText());
        
        // Set up the progress bar
        processingProgressBar.setMinimum(0);
        processingProgressBar.setMaximum(processingList.size());
        processingProgressBar.setValue(0);
        
        // Register this as observer of all images
        processedCount = 0;
        for (ProcessedImage current : processingList)
        {
            //ProcessedImage current = processedImageListModel.getElementAt(i);
            current.addObserver(this);
            current.setProcessing();
        }
        
        initBlocks();
        if (blockCount > 0) {
            processNextBlock();
        }
        
    }
    
    /*private void processSelectedStream() {

        // Disable ui component
        componentsInProcessingState();
        
        // Init the client
        client = new nViso3DFIHttpClient(
            applicationIdText.getText(),
            applicationKeyText.getText());
        
        // Set up the progress bar
        processingProgressBar.setMinimum(0);
        processingProgressBar.setMaximum(processedStream.getImages().getSize());
        processingProgressBar.setValue(0);
        
        // Register this as observer of all images
        processedCount = 0;
        for (int i=0; i < processedStream.getImages().getSize(); ++i) //ProcessedImage current : processingList)
        {
            ProcessedImage current = processedStream.getImages().getElementAt(i);
            current.addObserver(this);
            current.setProcessing();
        }
        
        client.processEmotionStreamByUpload(
                processedStream);
    }
    
    private void processSelectedVideos() {
    	
        if (processingVideosList.size() <= 0) {
            return;
        }
        // Disable ui component
        componentsInProcessingState();
        
        // Init the client
        client = new nViso3DFIHttpClient(
            applicationIdText.getText(),
            applicationKeyText.getText());
        
        // Set up the progress bar
        processingProgressBar.setMinimum(0);
        processingProgressBar.setMaximum(processingVideosList.size());
        processingProgressBar.setValue(0);
        
        // Register this as observer of all images
        processedCount = 0;
        for (ProcessedVideo current : processingVideosList)
        {
            current.addObserver(this);
            current.setProcessing();
        }
        
        for (ProcessedVideo current : processingVideosList) {
        	client.processEmotionVideoByUpload(current);
        }
    }*/
    
    private void processAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processAllButtonActionPerformed
    	if (jTabbedPane.getSelectedIndex() == 0){ // Photos
	        processingList.clear();
	        /*for (int i = 0; i < processedImageListModel.getSize(); i++) {
	            processingList.add(processedImageListModel.getElementAt(i));
	        }*/
	        for (int i = 0; i < processedFileTableModel.getRowCount(); i++) {
	            processingList.add(processedFileTableModel.getImageAt(i));
	        }
	        processSelectedList();
    	}
    	/*else if (jTabbedPane.getSelectedIndex() == 1){ // Stream
	        processSelectedStream();
    	}
    	else if (jTabbedPane.getSelectedIndex() == 2){ // Video
    		processingVideosList.clear();
    		for (int i = 0; i < processedVideoListModel.getSize(); i++) {
	            processingVideosList.add(processedVideoListModel.getElementAt(i));
	        }
    		processSelectedVideos();
    	}*/
    }//GEN-LAST:event_processAllButtonActionPerformed

    private void saveToCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToCsvButtonActionPerformed
        // Choose CSV File
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose a CSV file");
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if(f.isDirectory()) {return true;}
                return f.getName().endsWith(".csv");
            }

            @Override
            public String getDescription() {
                return "Csv file (*.csv)";
            }
        });
        
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File csvFile = chooser.getSelectedFile();
            if (!csvFile.getName().endsWith(".csv")) {
                JOptionPane.showMessageDialog(null,
                    csvFile.getName() + " is not a valid csv file name.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    Date date = new Date();
                    boolean writeHeader = !csvFile.exists();
                    FileWriter fileWriter = new FileWriter(csvFile,true);
                    CsvWriter csvWriter = new CsvWriter(fileWriter,',');
                    // Write header if needed
                    if (writeHeader) {
                        csvWriter.write("File");
                        csvWriter.write("Date");
                        //csvWriter.write("Session ID");
                        csvWriter.write("Frame ID");
                        for (String emo : ProcessedFace.ALL_EMOTIONS) {
                        	emo = emo.substring(0, 1).toUpperCase() + emo.substring(1);
                            csvWriter.write(emo);
                        }
                        csvWriter.write("No face found");
                        csvWriter.write("Error");
                        csvWriter.endRecord();
                    }
                    // Write value for each image
                    for (int i = 0; i < processedFileTableModel.getRowCount(); i++)
                    {
                        ProcessedImage current = processedFileTableModel.getImageAt(i);
                        if (current.getState() == ProcessedImage.State.Processed)
                        {
                            csvWriter.write(current.getImagePath().getName());
                            csvWriter.write(dateFormat.format(date));
                            //csvWriter.write(sessionIdText.getText());
                            csvWriter.write(Integer.toString(i));
                            // Face no face
                            if (current.getFaces().size() > 0) {
                                ProcessedFace face = current.getFaces().get(0);
                                for (String emo : ProcessedFace.ALL_EMOTIONS) {
                                    csvWriter.write(Double.toString(face.getEmotionProfile().get(emo)));
                                }
                                csvWriter.write("0");
                            } else {
                                for (String emo : ProcessedFace.ALL_EMOTIONS) {
                                    csvWriter.write("NaN");
                                }
                                csvWriter.write("1");
                            }
                            csvWriter.write(current.getProcessingStatusMessage());
                            csvWriter.endRecord();
                        }
                    }
                    csvWriter.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null,
                        csvFile.getName() + " cannot be used ("+ex.getMessage()+")",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
                
                
            }
        }
    }//GEN-LAST:event_saveToCsvButtonActionPerformed
    
    private void folderImagesTableValueSelected(java.awt.AWTEvent evt) {
    	//String filename = (String) folderImagesTable.getValueAt(folderImagesTable.getSelectedRow(), 0);
    	processedPhotoPanel.setProcessedImage(processedFileTableModel.getImageAt(folderImagesTable.getSelectedRow()));
        processedEmotionPanel.setProcessedImage(processedFileTableModel.getImageAt(folderImagesTable.getSelectedRow()));
    }

    private void folderImagesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_folderImagesListValueChanged
    	processedPhotoPanel.setProcessedImage((ProcessedImage)folderImagesList.getSelectedValue());
        processedEmotionPanel.setProcessedImage((ProcessedImage)folderImagesList.getSelectedValue());
    }//GEN-LAST:event_folderImagesListValueChanged

    /*private void processSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processSelectedButtonActionPerformed
    	if (jTabbedPane.getSelectedIndex() == 0) { // Photos
	        processingList.clear();
	        processingList.addAll(folderImagesList.getSelectedValuesList());
	        processSelectedList();
    	}
    	else if (jTabbedPane.getSelectedIndex() == 2) { // Videos
    		processingVideosList.clear();
	        processingVideosList.addAll(folderVideosList.getSelectedValuesList());
	        processSelectedVideos();
    	}
        
    }//GEN-LAST:event_processSelectedButtonActionPerformed
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel applicationIdLabel;
    private javax.swing.JTextField applicationIdText;
    private javax.swing.JLabel applicationKeyLabel;
    private javax.swing.JTextField applicationKeyText;
    private javax.swing.JList folderImagesList;
    private javax.swing.JTable folderImagesTable;
    
    private javax.swing.JPanel logoPanel;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JPanel jPhotoTab;
    private javax.swing.JPanel inputPhotoPanel;
    private javax.swing.JLabel photoFileCounterLabel;
    private javax.swing.JScrollPane photoScrollPane;
    
    
    private javax.swing.JScrollPane jStreamScrollPane;
    private javax.swing.JScrollPane jVideoScrollPane;
    
    
    private javax.swing.JButton processAllButton;
    private nv.ProcessedEmotionPanel processedEmotionPanel;
    private nv.ProcessedImagePanel processedPhotoPanel;
    private javax.swing.JProgressBar processingProgressBar;
    private javax.swing.JButton saveToCsvButton;
    private javax.swing.JButton selectFolderButtom;
    private javax.swing.JLabel serverLabel;
    
    // End of variables declaration//GEN-END:variables

    private void componentsInProcessingState() {
        applicationIdText.setEnabled(false);
        applicationKeyText.setEnabled(false);
        selectFolderButtom.setEnabled(false);
        saveToCsvButton.setEnabled(false);
        processAllButton.setEnabled(false);
    }
    
    private void componentsInNormalState() {
        applicationIdText.setEnabled(true);
        applicationKeyText.setEnabled(true);
        selectFolderButtom.setEnabled(true);
        if (folderImagesTable.getRowCount() != 0) saveToCsvButton.setEnabled(true);
        else saveToCsvButton.setEnabled(false);
        if (folderImagesTable.getRowCount() != 0) processAllButton.setEnabled(true);
        else processAllButton.setEnabled(false);
    }
    
    @Override
    public void update(Observable o, Object arg) {
        // Some items in the list are updated ... update the progress
        
        synchronized(this) {
        	if(o.getClass().equals(ProcessedImage.class)) {
	            //int processedCount = 0;
	            //for (ProcessedImage current : processingList) {
	                //ProcessedImage current = processedImageListModel.getElementAt(i);
	                ProcessedImage current = (ProcessedImage)o;
	                if (current.getState() == ProcessedImage.State.Processed) {
	                    processedCount += 1;
	                    currentInBlockProcessed += 1;
	                }
	            //}
	            processingProgressBar.setValue(processedCount);
	            processingProgressBar.repaint();
	            // If block finished
	            if (currentInBlockProcessed == blockCount) {
	                currentInBlockProcessed = 0;
	                blockStarts = blockStarts+blockCount;
	                blockCount = Math.min(10, processingList.size()-blockStarts);
	                if (blockCount > 0) {
	                    processNextBlock();
	                }
	            }
	            // If processing finished
	            if (processedCount == processingList.size()) {
	                for (ProcessedImage cimg : processingList) {
	                    //ProcessedImage current = processedImageListModel.getElementAt(i);
	                    cimg.deleteObserver(this);
	                }
	                processedCount = 0;
	                currentInBlockProcessed = -1;
	                componentsInNormalState();
	            }
	        }
        	
        	else if(o.getClass().equals(ProcessedVideo.class)) {
	            //int processedCount = 0;
	            //for (ProcessedImage current : processingList) {
	                //ProcessedImage current = processedImageListModel.getElementAt(i);
	                ProcessedVideo current = (ProcessedVideo)o;
	                if (current.getState() == ProcessedVideo.State.Processed) {
	                    processedCount += 1;
	                    currentInBlockProcessed += 1;
	                }
	            //}
	            processingProgressBar.setValue(processedCount);
	            // If block finished
	            /*if (currentInBlockProcessed == blockCount) {
	                currentInBlockProcessed = 0;
	                blockStarts = blockStarts+blockCount;
	                blockCount = Math.min(10, processingList.size()-blockStarts);
	                if (blockCount > 0) {
	                    processNextBlock();
	                }
	            }*/
	            // If processing finished
	            if (processedCount == processingVideosList.size()) {
	                for (ProcessedVideo cvideo : processingVideosList) {
	                    //ProcessedImage current = processedImageListModel.getElementAt(i);
	                    cvideo.deleteObserver(this);
	                }
	                processedCount = 0;
	                currentInBlockProcessed = -1;
	                componentsInNormalState();
	            }
	        }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Get the app_id and app_key from args
        String appId = "";
        String appKey = "";
        if (args.length == 2)
        {
           appId = args[0];
           appKey = args[1];
        }
        
        final String fAppId = appId;
        final String fAppKey = appKey;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NVisoGuiMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NVisoGuiMainFrame(fAppId, fAppKey).setVisible(true);
            }
        });
    }
}
