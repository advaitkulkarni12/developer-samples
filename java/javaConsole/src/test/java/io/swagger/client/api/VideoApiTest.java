/**
 * Developer API
 * Documentation of worker endpoints
 *
 * OpenAPI spec version: 2.1
 * Contact: info@nviso.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideoApi
 */
public class VideoApiTest {

    private final VideoApi api = new VideoApi();

    
    /**
     * Process a video. Returns the JSON. Keeps Connection Alive.
     *
     * Process a video. The connection stays alive until the JSON of the video is returned
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoProcessUploadTest() throws ApiException {
        File file = new File("src/test/java/io/swagger/client/api/data/dataVideo/small-video.mp4");
        Integer fps = 24;
        Integer width = 1280;
        Integer height = 720;
        Boolean enableFaceId = false;
        String distance = "near";
        Boolean multipleFaces = true;
        Double xMin = 0.0;
        Double xMax = 1.0;
        Double yMin = 0.0;
        Double yMax = 1.0;
        String appId = "AppId";
        String appKey = "AppKey";

        String response = api.videoProcessUpload(file, fps, width, height, enableFaceId, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);

		//System.out.println(response);

		JSONArray responseJSON = new JSONArray(response);

		for(int frame=0; frame < responseJSON.length(); ++frame) { // JSONObject json : responseJSON){
			System.out.print("\nOn frame " + Integer.toString(frame) + ", people feel : ");
			JSONObject json = responseJSON.getJSONObject(frame);
			if (frame == 0 || frame == 1){
				System.out.println(json.toString());
			}
			JSONArray faces = json.getJSONArray("FaceData");
			for(int i=0; i < faces.length(); ++i) { // face : faces){
				JSONObject emotions = faces.getJSONObject(i).getJSONObject("Emotion");
				double surprise = emotions.getJSONObject("Surprise").getJSONObject("Intensity").getDouble("Value");
				double happiness = emotions.getJSONObject("Happiness").getJSONObject("Intensity").getDouble("Value");
				double neutral = emotions.getJSONObject("Neutral").getJSONObject("Intensity").getDouble("Value");
				double sadness = emotions.getJSONObject("Sadness").getJSONObject("Intensity").getDouble("Value");
				double disgust = emotions.getJSONObject("Disgust").getJSONObject("Intensity").getDouble("Value");
				double anger = emotions.getJSONObject("Anger").getJSONObject("Intensity").getDouble("Value");
				double fear = emotions.getJSONObject("Fear").getJSONObject("Intensity").getDouble("Value");

				double max = Math.max(surprise, Math.max(happiness, Math.max(neutral, Math.max(sadness, Math.max(disgust, Math.max(anger, fear))))));
				if (max == surprise){
					System.out.print("surprise");
				}
				else if (max == happiness){
					System.out.print("happiness");
				}
				else if (max == neutral){
					System.out.print("neutral");
				}
				else if (max == sadness){
					System.out.print("sadness");
				}
				else if (max == disgust){
					System.out.print("disgust");
				}
				else if (max == anger){
					System.out.print("anger");
				}
				else {
					System.out.print("fear");
				}
				System.out.print(" ");
			}
		}
		System.out.print("\n");
    }
    
    /**
     * Download the results.
     *
     * Download the results after processing the video.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoQueueResultsTest() throws ApiException {
        String requestId = null;
        String appId = null;
        String appKey = null;
        // String response = api.videoQueueResults(requestId, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Check the status of the processed video.
     *
     * Check the status of the processed video.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoQueueStatusTest() throws ApiException {
        String requestId = null;
        String appId = null;
        String appKey = null;
        // String response = api.videoQueueStatus(requestId, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Process a video. Email sent when finished.
     *
     * Process a video. A webhook is used to inform you when the video will be processed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoQueueUploadTest() throws ApiException {
        File file = null;
        Integer fps = null;
        Integer width = null;
        Integer height = null;
        Boolean enableFaceId = null;
        String distance = null;
        Boolean multipleFaces = null;
        Boolean enableFooter = null;
        Boolean dimSecFaces = null;
        Double xMin = null;
        Double xMax = null;
        Double yMin = null;
        Double yMax = null;
        String appId = null;
        String appKey = null;
        // String response = api.videoQueueUpload(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Process a video. Returns the processed video. Keeps Connection Alive.
     *
     * Process a video. The connection stays alive until the processed video is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoRenderUploadTest() throws ApiException {
        File file = null;
        Integer fps = null;
        Integer width = null;
        Integer height = null;
        Boolean enableFaceId = null;
        String distance = null;
        Boolean multipleFaces = null;
        Boolean enableFooter = null;
        Boolean dimSecFaces = null;
        Double xMin = null;
        Double xMax = null;
        Double yMin = null;
        Double yMax = null;
        String appId = null;
        String appKey = null;
        // String response = api.videoRenderUpload(file, fps, width, height, enableFaceId, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);

        // TODO: test validations
    }
    
}
