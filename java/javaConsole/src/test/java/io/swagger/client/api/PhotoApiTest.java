/**
 * Developer API
 * Documentation of worker endpoints
 *
 * OpenAPI spec version: 2.1
 * Contact: info@nviso.ch
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.junit.Test;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
//import org.apache.http.util.EntityUtils;


/**
 * API tests for PhotoApi
 */
public class PhotoApiTest {

    private final PhotoApi api = new PhotoApi();

    
    /**
     * Process a photo using a a Base 64 encoded string
     *
     * Process a photo using a Base 64 encoded string. It returns a JSON with all the emotions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void photoProcessBase64Test() throws ApiException {
        String bas64 = null;
        String format = null;
        String distance = null;
        Boolean multipleFaces = null;
        Double xMin = null;
        Double xMax = null;
        Double yMin = null;
        Double yMax = null;
        String appId = null;
        String appKey = null;
        // String response = api.photoProcessBase64(bas64, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Post a photo to the API. JSON returned.
     *
     * Post a single photo to the API and get back the JSON response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void photoProcessUploadTest() throws ApiException {
		System.out.println("\n");
		System.out.println("Test of the Photo processing :");
		File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/ANGER.jpg");
		//File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/DISGUST.jpg");
		//File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/FEAR.jpg");
		//File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/HAPPINESS.jpg");
		//File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/NEUTRAL.jpg");
		//File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/SADNESS.jpg");
		//File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/SURPRISE.jpg");
        String format = "v2-Full";
        String distance = "near";
        Boolean multipleFaces = false;
        Double xMin = 0.0;
        Double xMax = 1.0;
        Double yMin = 0.0;
        Double yMax = 1.0;
        String appId = "AppId";
        String appKey = "AppKey";
        String response = api.photoProcessUpload(file, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);

		//System.out.println(response);
		JSONObject image = new JSONObject(response);

		JSONObject emotions = image.getJSONArray("FaceData").getJSONObject(0).getJSONObject("Emotion");
		double surprise = emotions.getJSONObject("Surprise").getJSONObject("Intensity").getDouble("Value");
		double happiness = emotions.getJSONObject("Happiness").getJSONObject("Intensity").getDouble("Value");
		double neutral = emotions.getJSONObject("Neutral").getJSONObject("Intensity").getDouble("Value");
		double sadness = emotions.getJSONObject("Sadness").getJSONObject("Intensity").getDouble("Value");
		double disgust = emotions.getJSONObject("Disgust").getJSONObject("Intensity").getDouble("Value");
		double anger = emotions.getJSONObject("Anger").getJSONObject("Intensity").getDouble("Value");
		double fear = emotions.getJSONObject("Fear").getJSONObject("Intensity").getDouble("Value");
		double max = Math.max(surprise, Math.max(happiness, Math.max(neutral, Math.max(sadness, Math.max(disgust, Math.max(anger, fear))))));

		System.out.print("The person on the image feels : ");
		if (max == surprise){
			System.out.print("surprise");
		}
		else if (max == happiness){
			System.out.print("happiness");
		}
		else if (max == neutral){
			System.out.print("neutral");
		}
		else if (max == sadness){
			System.out.print("sadness");
		}
		else if (max == disgust){
			System.out.print("disgust");
		}
		else if (max == anger){
			System.out.print("anger");
		}
		else {
			System.out.print("fear");
		}
		System.out.println(".");

        // TODO: test validations
    }
    
    /**
     * Process a photo given its URL.
     *
     * Process a photo using its URL. It returns a JSON with all the emotions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void photoProcessUrlTest() throws ApiException {
        String url = null;
        String format = null;
        String distance = null;
        Boolean multipleFaces = null;
        Double xMin = null;
        Double xMax = null;
        Double yMin = null;
        Double yMax = null;
        String appId = null;
        String appKey = null;
        // String response = api.photoProcessUrl(url, format, distance, multipleFaces, xMin, xMax, yMin, yMax, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Post a photo using as a Base 64 encoded string. Screenshot returned.
     *
     * Process a photo using a Base 64 encoded string. It returns a JSON with all the emotions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void photoRenderBase64Test() throws ApiException {
        String bas64 = null;
        String distance = null;
        Boolean multipleFaces = null;
        Boolean enableFooter = null;
        Boolean dimSecFaces = null;
        Double xMin = null;
        Double xMax = null;
        Double yMin = null;
        Double yMax = null;
        String appId = null;
        String appKey = null;
        // String response = api.photoRenderBase64(bas64, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);

        // TODO: test validations
    }
    
    /**
     * Post a photo to the API. Screenshot returned.
     *
     * Post a single photo to the API and get back the screenshot. WARNING: The screenshot cannot be displayed in the UI. This will be fixed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void photoRenderUploadTest() throws ApiException {
	// Render does nor work !
		/*File file = new File("src/test/java/io/swagger/client/api/data/dataPhoto/HAPPINESS.jpg");
        String distance = "near";
        Boolean multipleFaces = false;
		Boolean enableFooter = true;
        Boolean dimSecFaces = true;
        Double xMin = 0.0;
        Double xMax = 1.0;
        Double yMin = 0.0;
        Double yMax = 1.0;
        String appId = "AppId";
        String appKey = "AppKey";
        String response = api.photoRenderUpload(file, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);
		System.out.println(response.length());
		
		//FileUtils.writeByteArrayToFile(new File("render"), responseByte);
		//File outputFile = new File("C:/Users/nviso/Desktop/sdks_paul/java/src/test/java/io/swagger/client/api/render.txt");
		try{
			byte[] responseByte = new byte[0];
			//responseByte = EntityUtils.toByteArray(response);
			responseByte = response.getBytes();
			FileOutputStream fos = new FileOutputStream("src/test/java/io/swagger/client/api/render.txt");
			fos.write(responseByte.length);
			System.out.println(responseByte.length);
			fos.close();
		}
		catch(IOException e) {
			e.printStackTrace();
			System.out.println("IO error !!!");
			//assert(false);
		}
		*/
    }
    
    /**
     * Render a photo given its URL.
     *
     * Render a photo using its URL. It returns a screenshot of the processed photo.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void photoRenderUrlTest() throws ApiException {
        String url = null;
        String distance = null;
        Boolean multipleFaces = null;
        Boolean enableFooter = null;
        Boolean dimSecFaces = null;
        Double xMin = null;
        Double xMax = null;
        Double yMin = null;
        Double yMax = null;
        String appId = null;
        String appKey = null;
        // String response = api.photoRenderUrl(url, distance, multipleFaces, enableFooter, dimSecFaces, xMin, xMax, yMin, yMax, appId, appKey);

        // TODO: test validations
    }
    
}
