# coding: utf-8

"""
    Developer API

    Documentation of worker endpoints

    OpenAPI spec version: 2.1
    Contact: info@nviso.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PhotoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def photo_process_base64(self, bas64, **kwargs):
        """
        Process a photo using a a Base 64 encoded string
        Process a photo using a Base 64 encoded string. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_process_base64(bas64, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bas64: Base 64 encoded image (required)
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.photo_process_base64_with_http_info(bas64, **kwargs)
        else:
            (data) = self.photo_process_base64_with_http_info(bas64, **kwargs)
            return data

    def photo_process_base64_with_http_info(self, bas64, **kwargs):
        """
        Process a photo using a a Base 64 encoded string
        Process a photo using a Base 64 encoded string. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_process_base64_with_http_info(bas64, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bas64: Base 64 encoded image (required)
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bas64', 'format', 'distance', 'multiple_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_process_base64" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bas64' is set
        if ('bas64' not in params) or (params['bas64'] is None):
            raise ValueError("Missing the required parameter `bas64` when calling `photo_process_base64`")

        resource_path = '/photo/process/base64'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'format' in params:
            query_params['format'] = params['format']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bas64' in params:
            body_params = params['bas64']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def photo_process_upload(self, file, **kwargs):
        """
        Post a photo to the API. JSON returned.
        Post a single photo to the API and get back the JSON response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_process_upload(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to post to the API. (required)
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.photo_process_upload_with_http_info(file, **kwargs)
        else:
            (data) = self.photo_process_upload_with_http_info(file, **kwargs)
            return data

    def photo_process_upload_with_http_info(self, file, **kwargs):
        """
        Post a photo to the API. JSON returned.
        Post a single photo to the API and get back the JSON response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_process_upload_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to post to the API. (required)
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'format', 'distance', 'multiple_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_process_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `photo_process_upload`")

        resource_path = '/photo/process/upload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'format' in params:
            query_params['format'] = params['format']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def photo_process_url(self, url, **kwargs):
        """
        Process a photo given its URL.
        Process a photo using its URL. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_process_url(url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str url: URL to upload the picture (required)
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.photo_process_url_with_http_info(url, **kwargs)
        else:
            (data) = self.photo_process_url_with_http_info(url, **kwargs)
            return data

    def photo_process_url_with_http_info(self, url, **kwargs):
        """
        Process a photo given its URL.
        Process a photo using its URL. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_process_url_with_http_info(url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str url: URL to upload the picture (required)
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url', 'format', 'distance', 'multiple_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_process_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params) or (params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `photo_process_url`")

        resource_path = '/photo/process/url'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'url' in params:
            query_params['url'] = params['url']
        if 'format' in params:
            query_params['format'] = params['format']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def photo_render_base64(self, bas64, **kwargs):
        """
        Post a photo using as a Base 64 encoded string. Screenshot returned.
        Process a photo using a Base 64 encoded string. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_render_base64(bas64, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bas64: Base 64 encoded image (required)
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param bool enable_footer: Enable the footer with more information on the emotions. Default value is true.
        :param bool dim_sec_faces: If set to true, it will dim all the secondary faces. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.photo_render_base64_with_http_info(bas64, **kwargs)
        else:
            (data) = self.photo_render_base64_with_http_info(bas64, **kwargs)
            return data

    def photo_render_base64_with_http_info(self, bas64, **kwargs):
        """
        Post a photo using as a Base 64 encoded string. Screenshot returned.
        Process a photo using a Base 64 encoded string. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_render_base64_with_http_info(bas64, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bas64: Base 64 encoded image (required)
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param bool enable_footer: Enable the footer with more information on the emotions. Default value is true.
        :param bool dim_sec_faces: If set to true, it will dim all the secondary faces. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bas64', 'distance', 'multiple_faces', 'enable_footer', 'dim_sec_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_render_base64" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bas64' is set
        if ('bas64' not in params) or (params['bas64'] is None):
            raise ValueError("Missing the required parameter `bas64` when calling `photo_render_base64`")

        resource_path = '/photo/render/base64'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'enable_footer' in params:
            query_params['enableFooter'] = params['enable_footer']
        if 'dim_sec_faces' in params:
            query_params['dimSecFaces'] = params['dim_sec_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bas64' in params:
            body_params = params['bas64']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['image/png'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def photo_render_upload(self, file, **kwargs):
        """
        Post a photo to the API. Screenshot returned.
        Post a single photo to the API and get back the screenshot. WARNING: The screenshot cannot be displayed in the UI. This will be fixed

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_render_upload(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to post to the API. (required)
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param bool enable_footer: Enable the footer with more information on the emotions. Default value is true.
        :param bool dim_sec_faces: If set to true, it will dim all the secondary faces. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.photo_render_upload_with_http_info(file, **kwargs)
        else:
            (data) = self.photo_render_upload_with_http_info(file, **kwargs)
            return data

    def photo_render_upload_with_http_info(self, file, **kwargs):
        """
        Post a photo to the API. Screenshot returned.
        Post a single photo to the API and get back the screenshot. WARNING: The screenshot cannot be displayed in the UI. This will be fixed

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_render_upload_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to post to the API. (required)
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param bool enable_footer: Enable the footer with more information on the emotions. Default value is true.
        :param bool dim_sec_faces: If set to true, it will dim all the secondary faces. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'distance', 'multiple_faces', 'enable_footer', 'dim_sec_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_render_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `photo_render_upload`")

        resource_path = '/photo/render/upload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'enable_footer' in params:
            query_params['enableFooter'] = params['enable_footer']
        if 'dim_sec_faces' in params:
            query_params['dimSecFaces'] = params['dim_sec_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['image/png'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def photo_render_url(self, url, **kwargs):
        """
        Render a photo given its URL.
        Render a photo using its URL. It returns a screenshot of the processed photo.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_render_url(url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str url: URL to upload the picture (required)
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param bool enable_footer: Enable the footer with more information on the emotions. Default value is true.
        :param bool dim_sec_faces: If set to true, it will dim all the secondary faces. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.photo_render_url_with_http_info(url, **kwargs)
        else:
            (data) = self.photo_render_url_with_http_info(url, **kwargs)
            return data

    def photo_render_url_with_http_info(self, url, **kwargs):
        """
        Render a photo given its URL.
        Render a photo using its URL. It returns a screenshot of the processed photo.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.photo_render_url_with_http_info(url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str url: URL to upload the picture (required)
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param bool enable_footer: Enable the footer with more information on the emotions. Default value is true.
        :param bool dim_sec_faces: If set to true, it will dim all the secondary faces. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url', 'distance', 'multiple_faces', 'enable_footer', 'dim_sec_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_render_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params) or (params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `photo_render_url`")

        resource_path = '/photo/render/url'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'url' in params:
            query_params['url'] = params['url']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'enable_footer' in params:
            query_params['enableFooter'] = params['enable_footer']
        if 'dim_sec_faces' in params:
            query_params['dimSecFaces'] = params['dim_sec_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['image/png'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
