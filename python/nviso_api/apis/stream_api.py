# coding: utf-8

"""
    Developer API

    Documentation of worker endpoints

    OpenAPI spec version: 2.1
    Contact: info@nviso.ch
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StreamApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def stream_process_base64(self, base64, key, **kwargs):
        """
        Process an image using a Base 64 encoded string
        Process an image using a Base 64 encoded string. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_process_base64(base64, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str base64: Base 64 encoded image (required)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param float score: Score defines the order of the images. Image with lowest score will first in the sequence. If score is not set, then the order will done on the timestamp.
        :param float time: Relative time of the video. Default is 0.0.
        :param float timestamp: Specific timestamp for the picture in the session in UNIX time. Default is the time when you process the image.
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_process_base64_with_http_info(base64, key, **kwargs)
        else:
            (data) = self.stream_process_base64_with_http_info(base64, key, **kwargs)
            return data

    def stream_process_base64_with_http_info(self, base64, key, **kwargs):
        """
        Process an image using a Base 64 encoded string
        Process an image using a Base 64 encoded string. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_process_base64_with_http_info(base64, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str base64: Base 64 encoded image (required)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param float score: Score defines the order of the images. Image with lowest score will first in the sequence. If score is not set, then the order will done on the timestamp.
        :param float time: Relative time of the video. Default is 0.0.
        :param float timestamp: Specific timestamp for the picture in the session in UNIX time. Default is the time when you process the image.
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base64', 'key', 'score', 'time', 'timestamp', 'format', 'distance', 'multiple_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_process_base64" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base64' is set
        if ('base64' not in params) or (params['base64'] is None):
            raise ValueError("Missing the required parameter `base64` when calling `stream_process_base64`")
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_process_base64`")

        resource_path = '/stream/process/base64'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'score' in params:
            query_params['score'] = params['score']
        if 'time' in params:
            query_params['time'] = params['time']
        if 'timestamp' in params:
            query_params['timestamp'] = params['timestamp']
        if 'format' in params:
            query_params['format'] = params['format']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'base64' in params:
            body_params = params['base64']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_process_upload(self, file, key, **kwargs):
        """
        Post a image to the API. JSON returned.
        Post a single image to the API and get back the JSON response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_process_upload(file, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to post to the API. (required)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param float score: Score defines the order of the images. Image with lowest score will first in the sequence. If score is not set, then the order will done on the timestamp.
        :param float time: Relative time of the video. Default is 0.0.
        :param float timestamp: Specific timestamp for the picture in the session in UNIX time. Default is the time when you process the image.
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_process_upload_with_http_info(file, key, **kwargs)
        else:
            (data) = self.stream_process_upload_with_http_info(file, key, **kwargs)
            return data

    def stream_process_upload_with_http_info(self, file, key, **kwargs):
        """
        Post a image to the API. JSON returned.
        Post a single image to the API and get back the JSON response.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_process_upload_with_http_info(file, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: File to post to the API. (required)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param float score: Score defines the order of the images. Image with lowest score will first in the sequence. If score is not set, then the order will done on the timestamp.
        :param float time: Relative time of the video. Default is 0.0.
        :param float timestamp: Specific timestamp for the picture in the session in UNIX time. Default is the time when you process the image.
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'key', 'score', 'time', 'timestamp', 'format', 'distance', 'multiple_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_process_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `stream_process_upload`")
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_process_upload`")

        resource_path = '/stream/process/upload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'score' in params:
            query_params['score'] = params['score']
        if 'time' in params:
            query_params['time'] = params['time']
        if 'timestamp' in params:
            query_params['timestamp'] = params['timestamp']
        if 'format' in params:
            query_params['format'] = params['format']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_process_url(self, url, key, **kwargs):
        """
        Process an image given its URL.
        Process an image using its URL. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_process_url(url, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str url: URL to upload the picture (required)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param float score: Score defines the order of the images. Image with lowest score will first in the sequence. If score is not set, then the order will done on the timestamp.
        :param float time: Relative time of the video. Default is 0.0.
        :param float timestamp: Specific timestamp for the picture in the session in UNIX time. Default is the time when you process the image.
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_process_url_with_http_info(url, key, **kwargs)
        else:
            (data) = self.stream_process_url_with_http_info(url, key, **kwargs)
            return data

    def stream_process_url_with_http_info(self, url, key, **kwargs):
        """
        Process an image given its URL.
        Process an image using its URL. It returns a JSON with all the emotions.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_process_url_with_http_info(url, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str url: URL to upload the picture (required)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param float score: Score defines the order of the images. Image with lowest score will first in the sequence. If score is not set, then the order will done on the timestamp.
        :param float time: Relative time of the video. Default is 0.0.
        :param float timestamp: Specific timestamp for the picture in the session in UNIX time. Default is the time when you process the image.
        :param str format: Format of the JSON response. Default is v2-Full.
        :param str distance: Distance is the distance at which the picture was taken. Near = 1.5 m; Medium = 3 m; Far > 3 m. Default value is near.
        :param bool multiple_faces: If there are multiple faces in the region of interest, then you need to put this value to True. Default value is true.
        :param float x_min: Minimum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float x_max: Maximum horizontal value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param float y_min: Minimum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 0.0
        :param float y_max: Maximum vertical value for the region of interest. It should be between 0.0 and 1.0. Default is 1.0
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url', 'key', 'score', 'time', 'timestamp', 'format', 'distance', 'multiple_faces', 'x_min', 'x_max', 'y_min', 'y_max', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_process_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params) or (params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `stream_process_url`")
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_process_url`")

        resource_path = '/stream/process/url'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'url' in params:
            query_params['url'] = params['url']
        if 'key' in params:
            query_params['key'] = params['key']
        if 'score' in params:
            query_params['score'] = params['score']
        if 'time' in params:
            query_params['time'] = params['time']
        if 'timestamp' in params:
            query_params['timestamp'] = params['timestamp']
        if 'format' in params:
            query_params['format'] = params['format']
        if 'distance' in params:
            query_params['distance'] = params['distance']
        if 'multiple_faces' in params:
            query_params['multipleFaces'] = params['multiple_faces']
        if 'x_min' in params:
            query_params['xMin'] = params['x_min']
        if 'x_max' in params:
            query_params['xMax'] = params['x_max']
        if 'y_min' in params:
            query_params['yMin'] = params['y_min']
        if 'y_max' in params:
            query_params['yMax'] = params['y_max']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_session_data(self, key, **kwargs):
        """
        Query the results and get a CSV data format
        Query the results of the session using the key. Get an array with a CSV data format.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_data(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str data_format: Format of the JSON response. Default is basic.
        :param str sort_by: This parameter defines how you want to sort the images in the session. Default is timestamp.
        :param str limit_by: This parameter defines the parameters the API will use to limit the data. Default is timestamp.
        :param float start_limit: Starting limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param float end_limit: Ending limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param str order: This parameters defines the order, ascending or descending. Default is ascending
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_session_data_with_http_info(key, **kwargs)
        else:
            (data) = self.stream_session_data_with_http_info(key, **kwargs)
            return data

    def stream_session_data_with_http_info(self, key, **kwargs):
        """
        Query the results and get a CSV data format
        Query the results of the session using the key. Get an array with a CSV data format.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_data_with_http_info(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str data_format: Format of the JSON response. Default is basic.
        :param str sort_by: This parameter defines how you want to sort the images in the session. Default is timestamp.
        :param str limit_by: This parameter defines the parameters the API will use to limit the data. Default is timestamp.
        :param float start_limit: Starting limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param float end_limit: Ending limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param str order: This parameters defines the order, ascending or descending. Default is ascending
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'data_format', 'sort_by', 'limit_by', 'start_limit', 'end_limit', 'order', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_session_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_session_data`")

        resource_path = '/stream/session/data'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'data_format' in params:
            query_params['dataFormat'] = params['data_format']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'limit_by' in params:
            query_params['limitBy'] = params['limit_by']
        if 'start_limit' in params:
            query_params['startLimit'] = params['start_limit']
        if 'end_limit' in params:
            query_params['endLimit'] = params['end_limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_session_end(self, key, **kwargs):
        """
        End the session
        End the session using the key after starting a session.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_end(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_session_end_with_http_info(key, **kwargs)
        else:
            (data) = self.stream_session_end_with_http_info(key, **kwargs)
            return data

    def stream_session_end_with_http_info(self, key, **kwargs):
        """
        End the session
        End the session using the key after starting a session.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_end_with_http_info(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_session_end" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_session_end`")

        resource_path = '/stream/session/end'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_session_graph(self, key, **kwargs):
        """
        Query the results and get a Graph format
        Query the results of the session using the key. Get an array of JSONs back in a Graph format. The format charts-json is using the timestamp that the user has provided.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_graph(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str graph_format: Format of the JSON response. Default is charts-json.
        :param str sort_by: This parameter defines how you want to sort the images in the session. Default is timestamp.
        :param str limit_by: This parameter defines the parameters the API will use to limit the data. Default is timestamp.
        :param float start_limit: Starting limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param float end_limit: Ending limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param str order: This parameters defines the order, ascending or descending. Default is ascending
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_session_graph_with_http_info(key, **kwargs)
        else:
            (data) = self.stream_session_graph_with_http_info(key, **kwargs)
            return data

    def stream_session_graph_with_http_info(self, key, **kwargs):
        """
        Query the results and get a Graph format
        Query the results of the session using the key. Get an array of JSONs back in a Graph format. The format charts-json is using the timestamp that the user has provided.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_graph_with_http_info(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str graph_format: Format of the JSON response. Default is charts-json.
        :param str sort_by: This parameter defines how you want to sort the images in the session. Default is timestamp.
        :param str limit_by: This parameter defines the parameters the API will use to limit the data. Default is timestamp.
        :param float start_limit: Starting limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param float end_limit: Ending limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param str order: This parameters defines the order, ascending or descending. Default is ascending
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'graph_format', 'sort_by', 'limit_by', 'start_limit', 'end_limit', 'order', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_session_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_session_graph`")

        resource_path = '/stream/session/graph'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'graph_format' in params:
            query_params['graphFormat'] = params['graph_format']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'limit_by' in params:
            query_params['limitBy'] = params['limit_by']
        if 'start_limit' in params:
            query_params['startLimit'] = params['start_limit']
        if 'end_limit' in params:
            query_params['endLimit'] = params['end_limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_session_list(self, id, **kwargs):
        """
        Session information related to ID.
        Get all the session information related to a given ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_list(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID used for starting the sessions. Use the character % if you don't know a part of the ID. For example, %test%. (required)
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_session_list_with_http_info(id, **kwargs)
        else:
            (data) = self.stream_session_list_with_http_info(id, **kwargs)
            return data

    def stream_session_list_with_http_info(self, id, **kwargs):
        """
        Session information related to ID.
        Get all the session information related to a given ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_list_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID used for starting the sessions. Use the character % if you don't know a part of the ID. For example, %test%. (required)
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_session_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `stream_session_list`")

        resource_path = '/stream/session/list'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['ID'] = params['id']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/csv'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_session_query(self, key, **kwargs):
        """
        Query the results
        Query the results of the session using the key. Get an array of JSONs back.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_query(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str query_format: Format of the JSON response. Default is v2-Full.
        :param str sort_by: This parameter defines how you want to sort the images in the session. Default is timestamp.
        :param str limit_by: This parameter defines the parameters the API will use to limit the data. Default is timestamp.
        :param float start_limit: Starting limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param float end_limit: Ending limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param str order: This parameters defines the order, ascending or descending. Default is ascending
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_session_query_with_http_info(key, **kwargs)
        else:
            (data) = self.stream_session_query_with_http_info(key, **kwargs)
            return data

    def stream_session_query_with_http_info(self, key, **kwargs):
        """
        Query the results
        Query the results of the session using the key. Get an array of JSONs back.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_query_with_http_info(key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: key to store the processed images in the database. Please use a key generated by the API. (required)
        :param str query_format: Format of the JSON response. Default is v2-Full.
        :param str sort_by: This parameter defines how you want to sort the images in the session. Default is timestamp.
        :param str limit_by: This parameter defines the parameters the API will use to limit the data. Default is timestamp.
        :param float start_limit: Starting limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param float end_limit: Ending limit. It needs to be consistent with the limitBy parameter. (For example, if you're limiting by timestamp, put here a UNIX time)
        :param str order: This parameters defines the order, ascending or descending. Default is ascending
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'query_format', 'sort_by', 'limit_by', 'start_limit', 'end_limit', 'order', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_session_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `stream_session_query`")

        resource_path = '/stream/session/query'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'query_format' in params:
            query_params['queryFormat'] = params['query_format']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'limit_by' in params:
            query_params['limitBy'] = params['limit_by']
        if 'start_limit' in params:
            query_params['startLimit'] = params['start_limit']
        if 'end_limit' in params:
            query_params['endLimit'] = params['end_limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def stream_session_start(self, id, data, **kwargs):
        """
        Returns a key for the image endpoints.
        Returns a key to start a session for the image endpoints.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_start(id, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID that will be used to start the session. (required)
        :param str data: These data are key-value paired. It should look like {\"string\": \"value1\", \"number\": 123, \"boolean\": true}. They will be stored in the database. (required)
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: Key
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_session_start_with_http_info(id, data, **kwargs)
        else:
            (data) = self.stream_session_start_with_http_info(id, data, **kwargs)
            return data

    def stream_session_start_with_http_info(self, id, data, **kwargs):
        """
        Returns a key for the image endpoints.
        Returns a key to start a session for the image endpoints.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_session_start_with_http_info(id, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID that will be used to start the session. (required)
        :param str data: These data are key-value paired. It should look like {\"string\": \"value1\", \"number\": 123, \"boolean\": true}. They will be stored in the database. (required)
        :param str app_id: Application ID. Used for the authentication
        :param str app_key: Application key. Used for the authentication
        :return: Key
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data', 'app_id', 'app_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_session_start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `stream_session_start`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `stream_session_start`")

        resource_path = '/stream/session/start'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'app_id' in params:
            query_params['appId'] = params['app_id']
        if 'app_key' in params:
            query_params['appKey'] = params['app_key']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Key',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
